#!/usr/bin/env perl

############################################################################           
#  Licensed to the Apache Software Foundation (ASF) under one or more                  
#  contributor license agreements.  See the NOTICE file distributed with               
#  this work for additional information regarding copyright ownership.                 
#  The ASF licenses this file to You under the Apache License, Version 2.0             
#  (the "License"); you may not use this file except in compliance with                
#  the License.  You may obtain a copy of the License at                               
#                                                                                      
#      http://www.apache.org/licenses/LICENSE-2.0                                      
#                                                                                      
#  Unless required by applicable law or agreed to in writing, software                 
#  distributed under the License is distributed on an "AS IS" BASIS,                   
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.            
#  See the License for the specific language governing permissions and                 
#  limitations under the License.                                                      
                                                                                       
###############################################################################
# Tests for Jython embedding
#
#

our $PASSED="Pig job PASSED";
our $FAILED="Pig job FAILED";


$cfg = {

#NOTE THAT currentversion returns rc=8 but should be rc=6 per Pig - 1801
# So all of these tests are expected to fail for now
	'driver' => 'Pig'
       ,'groups' => [
		{
                'name' => 'Jython_Checkin',
                'tests' => [
                        {
                        'num' => 2,
						'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1=':INPATH:/singlefile/studenttab10k'
input2=':INPATH:/singlefile/votertab10k'
output=':OUTPATH:'

P = Pig.compile("""
a = load '$in1' as (name, age, gpa);
b = load '$in2' as (name, age, registration, contributions);
c = filter a by age < 50;
d = filter b by age < 50;
e = cogroup c by (name, age), d by (name, age) ;
f = foreach e generate flatten(c), flatten(d);
g = group f by registration;
h = foreach g generate group, SUM(f.d::contributions);
i = order h by $1;
store i into '$out';
""").bind({'in1':input1,'in2':input2, 'out':output}).runSingle() 
if P.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

\
			       ,'sql' => "select registration, sum(contributions)
from studenttab10k as a full outer join votertab10k as b using (name, age)
where a.age < 50 and b.age < 50
group by registration
order by 2;",
				'floatpostprocess' => 1,
				'delimiter' => '	',
				'sortArgs' => ['-t', '	', '+1', '-2'],
				}
		]

		}, {
                'name' => 'Jython_Embedded',
                'tests' => [
                        {
#NOT EMBEDDED
                        'num' => 1 
			,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
from org.apache.pig.scripting import Pig

P = Pig.compile("""A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); 
store A into ':OUTPATH:';""")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
	print "Pig job PASSED"

else:
	raise "Pig job FAILED"    
\

                        ,'sql' => "select name, age, gpa+0.00 from studenttab10k;" 
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'

                        }, {
# 15.0.3 	1 	invoke --embedded from java 
# EMBEDDED
                        'num' => 2 
                        ,'pig_params' => ['--embedded', 'jython']
			,'pig' => q\
# JYTHON COMMENT
from org.apache.pig.scripting import Pig

P = Pig.compile("""A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); 
store A into ':OUTPATH:';""")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
	print "Pig job PASSED"

else:
	raise "Pig job FAILED"    
\
                        ,'sql' => "select name, age, gpa+0.00 from studenttab10k;" 
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'

                        }, {

# 15.0.1 	1 	invoke from pig.pl -embedded 	  	 
# EMBEDDED
                        'num' => 3 
			,'use-pig.pl'=> 1  
                        ,'pig_params' => ['--embedded', 'jython']
			,'pig' => q\
# JYTHON COMMENT
from org.apache.pig.scripting import Pig

P = Pig.compile("""A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); 
store A into ':OUTPATH:';""")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
	print "Pig job PASSED"

else:
	raise "Pig job FAILED"    
\
                        ,'sql' => "select name, age, gpa+0.00 from studenttab10k;" 
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
# 15.0.1 	1 	invoke from pig.pl -embedded 	  	 
                        }
                        ]
		}, {

			'name' => 'Jython_CompileBindRun'
		       ,'tests' => [
				{
	#	8.1 	1 	compile pig script string 	 
	#	9.1 	1 	bind() without parameters 	 
	#      10.1 	1 	run a script that returns single positive result 
	#	12.1 	1 	python comments 
	# 14.0.4 	(compile()bind().runSingle)+ 	 
        # 15.0.2 	1 	invoke from pig.pl with python script #!/bin/python 	  	 
				'num' => 1
				,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
from org.apache.pig.scripting import Pig


P = Pig.compile("""A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); 
store A into ':OUTPATH:';""")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
	raise "Pig job FAILED"    
\

			       ,'sql' => "select name, age, gpa from studenttab10k;"
				,'floatpostprocess' => 1
				,'delimiter' => '	'
	#                      ,'expected_out_regex' => "Pig job PASSED"

				},{
	#	8.1 	1 	compile pig script string 	 
	#	9.1 	1 	bind() without parameters 	 
	#      10.1 	1 	run a script that returns single positive result 
	#	12.3 	1 	pig comments in pig script 
	# 14.0.9 	(compile->(bind->runSingle)+)+ 	 



				'num' => 2
				,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig


#TEST PIG COMMENTS
P = Pig.compile("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); 
store A into ':OUTPATH:';""")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
	\

			       ,'sql' => "select name, age, gpa from studenttab10k;"
				,'floatpostprocess' => 1
				,'delimiter' => '	'
	#                      ,'expected_out_regex' => "Pig job PASSED"

				},{
#  	9.2 	1 	bind single input parameter and no output parameters 	 
			'num' => 3
			,'pig' => q\#!/usr/bin/python
# 14.0.9 	(compile->(bind->runSingle)+)+ 	 

from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:"

P = Pig.compile("""A = load '$in' as (name, age, gpa); store A into ':OUTPATH:';""")

Q = P.bind({'in':input}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

			       ,'sql' => "select name, age, gpa from studenttab10k;"
				,'floatpostprocess' => 1
				,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED"
			},{
#  	9.3 	1 	bind multiple input parameter and no output parameters 	
#      10.1 	1 	run a script that returns single positive result 
# 14.0.9 	(compile->(bind->runSingle)+)+ 	 
			'num' => 4
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
input3= ":INPATH:/singlefile/studenttab10k"

P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
C = load '$in3' as (name, age, gpa);
store A into ':OUTPATH:.1';
store B into ':OUTPATH:.2';
store C into ':OUTPATH:.3';
""")

Q = P.bind({'in1':input1,'in2':input2, 'in3':input3}) 
result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

			 ,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
select name, age, gpa from studenttab10k;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"

			},{
#  	9.4 	1 	bind no input parameters and a single output arameter 	 
#      10.1 	1 	run a script that returns single positive result 
# 14.0.12 (single result =compile->result 	 
			'num' => 5
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:"

P = Pig.compile("""A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); store A into '$out';""")

Q = P.bind({'out':output}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

			,'sql' => q\select name, age, gpa from studenttab10k;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"

			},{
#  	9.5 	1 	bind no input parameters and a multiple output parameter 	 
#      10.1 	1 	run a script that returns single positive result 
# 14.0.9 	(compile->(bind->runSingle)+)+ 	 
			'num' => 6
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"

P = Pig.compile("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")

Q = P.bind({'out1':output1,'out2':output2}) 
result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

			,'sql' => q\select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"
			},{


#  	9.6 	1 	bind multiple input parameters and a multiple output parameter 	 
#      10.1 	1 	run a script that returns single positive result 
			'num' => 7
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"

P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")

Q = P.bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }) 
result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

			,'sql' => q\select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'
			},{


#  	9.7 	1 	bind multiple input parameters and a multiple output parameter in any order
#      10.1 	1 	run a script that returns single positive result 
			'num' => 8
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"

P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into ':OUTPATH:.1';
store B into ':OUTPATH:.2';
""")

Q = P.bind({'in1':input1,'in2':input2 }) 
result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\
			,'sql' => q\select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

			},{

# 9.8 	bind parallel execution wit a single entry 
# 10.1 	run a script that returns single positive result 
# 13.0.1 	single pipeline that succeeds 
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 9
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
output= ":OUTPATH:"
maximum="50"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B = filter A by age < $max;
store B into '$out';
""")

Q = P.bind([ {'in':input ,'max':maximum ,'out':output} ])

results = Q.run()
for i in [0]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\select name, age, gpa from studenttab10k where age < 50;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED0"
#                       ,'rc' => 0

			},{
#  	9.11 	1 	bind parallel execution with a multiple entries
#       10.2 	1 	run successful script that returns a list of positive result 
#     13.0.4 	multiple pipelines that succeed 
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 10
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0

			},{
#  	9.13 	For parallel execution, change the order of the entries, this should have no impact
#       10.2 	run successful script that returns a list of positive result 
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 11
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max3="30";
output3= ":OUTPATH:.1"

max1="50";
output1= ":OUTPATH:.2"

max2="40";
output2= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
{'in':input ,'max':max3 ,'out':output3} 
,{'in':input ,'max':max1 ,'out':output1} 
,{'in':input ,'max':max2 ,'out':output2}
])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 30;
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0

			},{

#  	9.8 	1 	bind input parameters that is undefined in python script 	 
#      10.3 	1 	run a script that returns single negative result 
#14.0.12 	2 	(parallel results = compile->bind->result 

			'num' => 12
		        ,'ignore' => "Bugzilla()"
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:"

P = Pig.compile("""A = load '$in' as (name, age, gpa); store A into '$out';""")

Q = P.bind({'in':bad_input, 'out':output}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\ 

		       ,'rc' => 6
		       #,'expected_out_regex' => "Pig job FAILED"    
 		       #,'expected_err_regex' => "bad_input.*not defined"
                       ,'expected_err_regex' => "ERROR 1121"

			},{
#  	9.9 	1 	bind output parameters that is undefined in python script 	 
#      10.3 	1 	run a script that returns single negative result 
			'num' => 13
                                ,'ignore' => "BUG(4249349)"
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:"

P = Pig.compile("""A = load '$in' as (name, age, gpa); store A into '$out';""")

Q = P.bind({'in':input, 'out':bad_output}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\ 

                        ,'rc' => 2
                        ,'expected_err_regex' => "INVALID.jar.*does not exist"
                       ,'expected_err_regex' => "ERROR 101"
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 14
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


results = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""").bind([
{'in':input ,'max':max1 ,'out':output1 } 
,{'in':input ,'max':max2 ,'out':output2 } 
,{'in':input ,'max':max3 ,'out':output3 }
]).run()

for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).run
			'num' => 15
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
{'in':input ,'max':max1 ,'out':output1 } 
,{'in':input ,'max':max2 ,'out':output2 } 
,{'in':input ,'max':max3 ,'out':output3 }
])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
			'num' => 16
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
{'in':input ,'max':max1 ,'out':output1 } 
,{'in':input ,'max':max2 ,'out':output2 } 
,{'in':input ,'max':max3 ,'out':output3 }
])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 17
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 18
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 19
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 20
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 21
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 22
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 23
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 24
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
			'num' => 25
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
			'num' => 26
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 27
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 28
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 29
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 30
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 31
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
			'num' => 32
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 33
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 34
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 35
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 36
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 37
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 38
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 39
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 40
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 41
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 42
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 43
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 44
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 45
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 46
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 47
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 48
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 49
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 50
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 51
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 52
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 53
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 54
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 55
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 56
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 57
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 58
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 59
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 60
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 61
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 62
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 63
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 64
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 65
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 66
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 67
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 68
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 14.0.13 	parallel results = compile.bind(parallel inputs).results
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 69
			,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

max1="50";
output1= ":OUTPATH:.1"

max2="40";
output2= ":OUTPATH:.2"

max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
	{'in':input ,'max':max1 ,'out':output1 } 
       ,{'in':input ,'max':max2 ,'out':output2 } 
       ,{'in':input ,'max':max3 ,'out':output3 }
	  ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

\

			,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studenttab10k where age < 40;
select name, age, gpa from studenttab10k where age < 30;\
			,'floatpostprocess' => 1
			,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0

			},{
#  	9.10 	1 	bind single inpput parameters with a parallel execution of scripts 	 
#	10.2 	1 	run successful script that returns a list of positive result
#     13.0.4 	multiple pipelines that succeed 
#     13.0.5  	run pipeline with multiple input and outputs 
# 17.0.3 	parallel execution : execute several data pipelines for the this pig script 
			'num' => 70
			,'pig' => q?#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
delimiter1='\\\\\\t'
max1="50"
output1= ":OUTPATH:.1"

input2= ":INPATH:/singlefile/studentcolon10k"
delimiter2= ':'
max2= "40"
output2= ":OUTPATH:.2"

input3=":INPATH:/singlefile/studentctrla10k"
delimiter3='\\u0001'
max3="30"
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' using PigStorage('$delimiter') as (name, age, gpa);
B = filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
        {'in':input1 ,'delimiter':delimiter1 ,'max':max1 ,'out':output1}
       ,{'in':input2 ,'delimiter':delimiter2 ,'max':max2 ,'out':output2}
       ,{'in':input3 ,'delimiter':delimiter3 ,'max':max3 ,'out':output3}
          ])

results = Q.run()
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    

?

		,'sql' => q\
select name, age, gpa from studenttab10k where age < 50;
select name, age, gpa from studentcolon10k where age < 40;
select name, age, gpa from studentctrla10k where age < 30;\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED1"
#                       ,'expected_out_regex' => "Pig job PASSED2"
#                       ,'expected_out_regex' => "Pig job PASSED3"
#                       ,'rc' => 0
		},{

#  9.10 	bind single inpput parameters with a parallel execution of scripts 	 
#      10.5run a script that returns mix of positive result and negative result 
#     13.0.8 multiple pipelines where the last pipeline fails 
#     13.0.5  run pipeline with multiple input and outputs 
# 17.0.3 parallel execution : execute several data pipelines for the this pig script 

		'num' => 71
                        ,'ignore'=> "Bugzilla: 4249140"
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
max1="50";
output1= ":OUTPATH:.1"

input2= ":INPATH:/singlefile/studenttab10k"
max2="40";
output2= ":OUTPATH:.2"

input3="INVALID_FILE"
max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
        {'in':input1 ,'max':max1 ,'out':output1} 
       ,{'in':input2 ,'max':max2 ,'out':output2} 
       ,{'in':input3 ,'max':max3 ,'out':output3}
          ])

results = Q.run()

#print "FAILED" rather than raising "FAILED"
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       print "Pig job FAILED"    

\
                       ,'expected_err_regex' => " ERROR 2118: Input path does not exist:.*INVALID_FILE"
                       ,'rc' => 6

		},{
#  9.10 	bind single inpput parameters with a parallel execution of scripts 	 
#      10.5run a script that returns mix of positive result and negative result , this has a data pipeline that fails at the beginning of the list
#    13.0.6   multiple pipelines where the first pipeline fails 
# 17.0.3 parallel execution : execute several data pipelines for the this pig script 
		'num' => 72
                        ,'ignore'=> "BUG(4249456)"
		,'pig' => q?#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= "INVALID_SOURCE_FILE"
delimiter1=''
max1="50";
output1= ":OUTPATH:.1"

input2= ":INPATH:/singlefile/studenttab10k"
delimiter2=''
max2="40";
output2= ":OUTPATH:.2"

input3= ":INPATH:/singlefile/studenttab10k"
delimiter3='\\u0001'
max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in'  as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
        {'in':input1 ,'max':max1 ,'out':output1} 
       ,{'in':input2 ,'max':max2 ,'out':output2} 
       ,{'in':input3 ,'max':max3 ,'out':output3}
          ])

results = Q.run()
#print "FAILED" rather than raising "FAILED"
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       print "Pig job FAILED"    

?

                        ,'expected_out_regex' => "Pig job FAILED0"
                        ,'expected_out_regex' => "Pig job PASSED1"
                        ,'expected_out_regex' => "Pig job PASSED2"
                        ,'expected_err_regex' => "FIX ERROR MESSAGE"
                ,'expected_err_regex' => "ERROR 1121"
                       ,'rc' => 6

		},{

# 9.12 bind() without parameters and throws an IOError 	 

		'num' => 73
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= "BAD_SOURCE_FILE"
output = ":OUTPATH:"

P = Pig.compile("""A = load '$in' as (name, age, gpa); store A into '$out';""")

Q = P.bind({'in':input, 'out':output}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => " ERROR 2118: Input path does not exist:"
                       ,'rc' => 6

		},{
# 9.13 bind an undefined input parameter 	 
		'num' => 74
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:"

P = Pig.compile("""A = load '$in' as (name, age, gpa); store A into '$out';""")

Q = P.bind({'in':invalid_parameter, 'out':output}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
                ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6

		},{
# 9.14 bind an undefined output parameter 	 
		'num' => 75
                        ,'ignore'=>"BUG(4249456)"
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
output = ""  #BAD DESTINATION FILE

P = Pig.compile("""A = load '$in' as (name, age, gpa); store A into '$out';""")

Q = P.bind({'in':input, 'out':output}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

#		,'sql' => q\select name, age, gpa from studenttab10k;\
#                        ,'floatpostprocess' => 1
#                        ,'delimiter' => ''
#                       ,'expected_err_regex' => "Pig job PASSED"
# 9.15bind input parameters that is undefined in python script 
# 9.16bind output parameters that is undefined in python script 
                        ,'expected_err_regex' => "FIX ERROR MESSAGE"
                ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6

		},{
		'num' => 76
                        ,'ignore'=>"BUG(4249456)"
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

P = Pig.compile("""A = load '$in' as (name, age, gpa); store A into '$out';""")

Q = P.bind({'in':bad_input, 'out':bad_output}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\
#                       ,'expected_err_regex' => "Pig job FAILED"
                        ,'expected_err_regex' => "FIX ERROR MESSAGE"
                ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6

		},{

#  8.2 	3 	compile script pig script with multiple inputs and outputs
#
		'num' => 77
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into ':OUTPATH:.1';
store B into ':OUTPATH:.2';
""")

Q = P.bind({'in1':input1,'in2':input2}) 

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"

		},{

#  8.3 	1 	compile().bind().run()
		'num' => 78
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"

result = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into ':OUTPATH:.1';
store B into ':OUTPATH:.2';
""").bind({'in1':input1,'in2':input2} ).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"

		},{
#     13.0.4 multiple pipelines that succeed 
#     13.0.5  run pipeline with multiple input and outputs 
		'num' => 79
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
output3= ":OUTPATH:.3"
output4= ":OUTPATH:.4"

P = Pig.compile("""
A = load '$in1' as (name, age);
B = load '$in2' as (name, age);
store A into '$out1';
store B into '$out2';
""");

Q = P.bind([
        {'in1':input1 ,'in2':input2 ,'out1':output1, 'out2':output2 }
       ,{'in1':input2 ,'in2':input1 ,'out1':output3, 'out2':output4 }
          ])

results = Q.run()
for i in [0, 1]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    
\ 

	      ,'sql' => q\
select name, age from studenttab10k;
select name, age from votertab10k;
select name, age from votertab10k;
select name, age from studenttab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED0"
#                       ,'expected_out_regex' => "Pig job PASSED1"


	},{

#     13.0.4 multiple pipelines that succeed 
#     13.0.5  run pipeline with multiple input and outputs 
		'num' => 791
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
output3= ":OUTPATH:.3"
output4= ":OUTPATH:.4"

P = Pig.compile("""
A = load '$in1' as (name, age, column3);
B = load '$in2' as (name, age, column3, column4);
store A into '$out1';
store B into '$out2';
""");

Q = P.bind([
        {'in1':input1 ,'in2':input2 ,'out1':output1, 'out2':output2 }
       ,{'in1':input2 ,'in2':input1 ,'out1':output3, 'out2':output4 }
          ])

results = Q.run()
for i in [0, 1]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED"
    else:
       raise "Pig job FAILED"    
\ 

	      ,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
select name, age, registration from votertab10k;
select name, age, gpa from studenttab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'

#                       ,'expected_out_regex' => "Pig job PASSED0"
#                       ,'expected_out_regex' => "Pig job PASSED1"
		},{
#  8.4 	1 	compile pig script with spaces that mean something in python 	 

		'num' => 80
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into ':OUTPATH:.1';
store B into ':OUTPATH:.2';
""").bind({'in1':input1,'in2':input2}).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
		},{
#  8.4 	1 	compile pig script string with single quotes 	 
# THIS DOESN'T WORK, I'M NOT SURE IF IT'S A FAILURE
		'num' => 81
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

P = Pig.compile("A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); store A into ':OUTPATH:';")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\select name, age, gpa from studenttab10k;\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"

		},{
#  8.5	1 	compile pig script string with double quotes 	 
		'num' => 82
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

P = Pig.compile("A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); store A into ':OUTPATH:';")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

		,'sql' => q\select name, age, gpa from studenttab10k;\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"

		},{
#  8.6 	compile pig script file with no input and no output parameters
#12.2 	import python modules 
#
		'num' => 83
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
    os.mkdir(tmp_dir_0)
tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_83"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into ':OUTPATH:.1';
store B into ':OUTPATH:.2';
""")
pigfile.close()

#execute pig script

result = Pig.compileFromFile( pig_script ).bind().runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"
		
		},{
#  8.7 	compile pig script file with no input and with output parameters
		'num' => 84
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

#create pig script

from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
    os.mkdir(tmp_dir_0)
tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_84"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'out1':output1,'out2':output2 }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"

		},{
#  8.8 	1 	compile pig script file with input and no output parameters
		'num' => 85
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
    os.mkdir(tmp_dir_0)

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_85"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into ':OUTPATH:.1';
store B into ':OUTPATH:.2';
""")
pigfile.close()

#execute pig script
input1=':INPATH:/singlefile/studenttab10k'
input2=':INPATH:/singlefile/votertab10k'

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2 }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"
		},{
#  8.9 	1 	compile pig script file with both input and output parameters
#8.11 	1 	compileFromFile for pig script file with full path
		'num' => 86
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
    os.mkdir(tmp_dir_0)

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_86"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"
		},{
#  8.10	1 	compile with file.name()
		'num' => 87
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
    os.mkdir(tmp_dir_0)

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_87"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"
		
#NOT DONE: 8.12 1 	compileFromFile for pig script file with relative path 	 
#NOT DONE: 8.13 3 	compileFromFile for pig script file with macros 	 
#NOT DONE: 8.14 1 	compileFromFile for pig script file without python library 	 
#WILL NOT IMPLEMENT: 8.15 3 	compileFromFile for pig script file with version specific python library 
#WILL NOT IMPLEMENT: 8.16 3 	compileFromFile for pig script file with multiple versions of python in the path 
#NOT DONE: 8.17 3 	compile pig script string with environment variables 
		},{
#  8.18 compile with an undefined parameter 
		'num' => 88
		,'pig' => q\#!/usr/bin/python

from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
    os.mkdir(tmp_dir_0)

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_88"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"
		},{
#  8.10	1 	compile with file.name()
		'num' => 89
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os
#create pig script

tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
    os.mkdir(tmp_dir_0)

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_89"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

		,'sql' => q\
select name, age, gpa from studenttab10k;
select name, age, registration, contributions from votertab10k;
\
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
#                       ,'expected_out_regex' => "Pig job PASSED"
		
#NOT DONE: 8.12 1 	compileFromFile for pig script file with relative path 	 
#NOT DONE: 8.13 3 	compileFromFile for pig script file with macros 	 
#NOT DONE: 8.14 1 	compileFromFile for pig script file without python library 	 
#WILL NOT IMPLEMENT: 8.15 3 	compileFromFile for pig script file with version specific python library 
#WILL NOT IMPLEMENT: 8.16 3 	compileFromFile for pig script file with multiple versions of python in the path 
#NOT DONE: 8.17 3 	compile pig script string with environment variables 
		},{
#  8.18 compile with an undefined parameter 
		'num' => 90
		,'pig' => q\#!/usr/bin/python

import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_90"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')

pigfile = open(':OUTPATH:/script.pig', 'w+')
pigfile.write("""
A = load '$bad_parameter' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                        ,'expected_err_regex' => "Pig job FAILED"
                ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		
		},{
#  8.19 bind output parameters that is undefined in python script 	
		'num' => 91
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;
#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_91"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pigfile)).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\
                        ,'expected_err_regex' => "Pig job FAILED"
                ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6

		},{

#  8.20 	compile pig script string where script throws IOException {...} 
		'num' => 92
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;
#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_92"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load '$in1' as (name, age, gpa);
B = load '$in2' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pigfile)).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()


if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\
                       ,'expected_err_regex' => "Pig job FAILED"
                ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6

		},{
#  8.22 	1 	compile pig script string referencing an undefined alias 	 
		'num' => 93
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_93"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
store A into '$out1';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

#missing out1
result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
               ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
#NOT DONE  8.23 	1 	compile pig script string with undefined environment variables 	 
		},{
#  8.24 	1 	compile pig script string with unmatched single quotes 	 
		'num' => 94
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_94"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')

#unmatched single quotes accross lines
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k  as (name, age, gpa);
B = load  :INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
               ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		},{
#  8.25 	1 	compile pig script string with double quotes 	double quotes are no longer supported in Pig
		'num' => 95
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_95"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')

#use double quotes
pigfile.write('A = load ":INPATH:/singlefile/studenttab10k" as (name, age, gpa); store A into "$out"; ')
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
               ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		},{
#  8.26 	1 	compile pig script string where script throws IOException {...} 	 
		'num' => 96
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_96"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load 'DOES_NOT_EXIST' as (name, age, gpa);
store A into '$out1';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'out1':output1,  }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
               ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		},{
#  8.27 	1 	compileFromFile for pig script file that does not exist throws IOException 	 
		'num' => 97
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_97"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
               ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		},{
#  8.28 compileFromFile for pig script file that does not have read permissions throws IOException 	
		'num' => 98
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_98"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w')
#no read permissions and file is left open until afer compile statement
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B = load ':INPATH:/singlefile/votertab10k' as (name, age, registration, contributions);
store A into '$out1';
store B into '$out2';
""")

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

pigfile.close()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
               ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		},{
#  8.29 	1 	compile empty script file throws IOException 	 
		'num' => 99
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

import os;

#create an empty pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_99"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write('')
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"

result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'expected_err_regex' => "Pig job FAILED"
               ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		},{
#  8.30 	1 	compile python pig script file throws IOException 	 
		'num' => 100
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

#create pig script

import os;

#create an empty pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_100"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
result = Pig.compileFromFile("A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); store A into ':OUTPATH:';").bind().run();
""")

result = Pig.compileFromFile( pig_script ).bind().run();
if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'rc' => 6
                       ,'expected_err_regex' => "Pig job FAILED"
                       ,'expected_err_regex' => "No module named os"
               ,'expected_err_regex' => "ERROR 1121"

		},{

#  9.15 	bind inpput parameters with same name twice
#      10.5run a script that returns mix of positive result and negative result , this has a data pipeline that fails at the beginning of the list
#    13.0.6   multiple pipelines where the first pipeline fails 
		'num' => 101
# same parameter name used twice
		,'pig' => q?#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
max1="50";
output1= ":OUTPATH:.1"

input2= ":INPATH:/singlefile/studenttab10k"
max2="40";
output2= ":OUTPATH:.2"

input3= ":INPATH:/singlefile/studenttab10k"
max3="30";
output3= ":OUTPATH:.3"


P = Pig.compile("""
A = load '$in'  as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")

Q = P.bind([
        {'in':input1 ,'max':max1 ,'max':max1 ,'out':output1} 
       ,{'in':input2 ,'max':max2 ,'max':max2 ,'out':":OUTPATH:.DOES_NOT_EXIST"} 
       ,{'in':input3 ,'max':max3 ,'max':max3 ,'out':output3}
          ])

results = Q.run()
#print "FAILED" rather than raising "FAILED"
for i in [0, 1, 2]:
    result = results[i]
    if result.isSuccessful():
       print "Pig job PASSED: " + str(i)
    else:
       print "Pig job FAILED: " + str(i)

?

                        ,'rc' => 0
               ,'expected_out_regex' => "Pig job PASSED: 0"
               ,'expected_out_regex' => "Pig job PASSED: 1"
               ,'expected_out_regex' => "Pig job PASSED: 2"
		},{

#  8.14  	  compileFromFile for pig script file without python library 
		'num' => 102
		,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
#from org.apache.pig.scripting import Pig


P = Pig.compile("""A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); 
store A into ':OUTPATH:';""")

Q = P.bind()

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'rc' => 6
                        ,'expected_err_regex' => "mismatched input.*expecting EOF"
               ,'expected_err_regex' => "ERROR 1121"

                },{

# 11.1  iter.next    
# 11.2 iter = results.getResults(alias) with first alias
# 11.3 iter = results.getResults(alias) with middle alias
# 11.4 	iter = results.getResults(alias) with last alias 

		'num' => 103
		,'ignore' => 'This test isn\'t quite ready'
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script
tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
	os.mkdir(tmp_dir_0)

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_103"
if not os.path.isdir(tmp_dir):
    os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < 50;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).runSingle()

if result.isSuccessful():
	print "Pig job PASSED"
else:
	raise "Pig job FAILED"    

for maximum in range(4, 13):
	output=":OUTPATH:"+str(maximum)
	Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
	result = Q.runSingle()
	Pig.explain();
	Pig.illustrate();


	Pig.describe('A');
	Pig.describe('B');
	Pig.describe('C');
	Pig.describe('D');
	Pig.illustrate();
	Pig.explain();

	
	if not results.isSuccessful():
	    raise "Pig job FAILED"    
	iter = results.getResults("A")
	if iter.next() > 1:
		print "COUNT" + str(maximum)
	else:
		print "LAST " + str(maximum)
		break
\

                       ,'rc' => 0

                },{

# 11.10 iter.next for an alias that is undefined 

		'num' => 104
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_104"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < 50;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

    Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = results.getResults("DOES_NOT_EXIST")
    if iter.next() > 1:
        count++
print "Pig alias (A"+count+")  SUCCESSFUL" 
    else:
print "Exit on alias (A"+count+")  SUCCESSFUL" 
        break

\
                       ,'rc' => 6
                       ,'expected_err_regex' => "mismatched input.*=.*expecting COLON"
               ,'expected_err_regex' => "ERROR 1121"

                },{

# 11.10   iter.next for an alias that is undefined 
		'num' => 105
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_105"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < 50;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

    Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = invalid_results.getResults("UNDEFINED")
    if iter.next() > 1:
        count++
print "Pig alias (A"+count+")  SUCCESSFUL" 
    else:
print "Exit on alias (A"+count+")  SUCCESSFUL" 
        break

\
                       ,'rc' => 6
                       ,'expected_err_regex' => "mismatched input.*=.*expecting COLON"
                       ,'expected_err_regex' => "if results.isSuccessful().*FAILED"
               ,'expected_err_regex' => "ERROR 1121"

                },{


# 11.8   1  	 iter.next without declaring iterator 
		'num' => 106
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_106"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < 50;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

    Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = undefined_results.getResults("A")
    if iter.next() > 1:
        count++
print "Pig alias (A"+count+")  SUCCESSFUL" 
    else:
print "Exit on alias (A"+count+")  SUCCESSFUL" 
        break

\
                       ,'rc' => 6
                       ,'expected_err_regex' => "FIX ERROR MESSAGE"
               ,'expected_err_regex' => "ERROR 1121"

                },{

# 11.7  iter = results.getResults() 

		'num' => 107
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_107"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < 50;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

    Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = results.getResults() #EMPTY ALIAS
    if iter.next() > 1:
        count++
print "Pig alias SUCCESSFUL" 
    else:
print "Exit on alias SUCCESSFUL" 
        break

\
                       ,'rc' => 6
                       ,'expected_err_regex' => "FIX ERROR MESSAGE"
               ,'expected_err_regex' => "ERROR 1121"

                },{

# 11.10 iter.next for an alias that is undefined 

		'num' => 108
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_108"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < 50;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if not result.isSuccessful():
    raise "Pig job FAILED"    

    Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = results.getResults("A") 
    if iter.next() > 1:
        count++
print "Pig alias SUCCESSFUL" 
    else:
print "Exit on alias SUCCESSFUL" 
        break

\
                       ,'rc' => 6
                       ,'expected_err_regex' => "FIX ERROR MESSAGE"
               ,'expected_err_regex' => "ERROR 1121"

                },{


# 11.15   1  	 results.getResults(alias) for null results

		'num' => 109
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_109"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
EMPTY= filter A by age > 9999;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

    Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = results.getResults("EMPTY") 
    if iter.next() > 1:
        count++
print "Pig alias SUCCESSFUL" 
    else:
print "Exit on alias SUCCESSFUL" 
        break

\
                       ,'rc' => 6
                       ,'expected_err_regex' => "FIX ERROR MESSAGE"
               ,'expected_err_regex' => "ERROR 1121"

		}

      ] 


	}, {
	'name' => 'Jython_Run'
       ,'tests' => [
                {
		'num' => 1

# 10.6  run a script that returns an empty list 
# 13.0.9  multiple pipelines where the one pipeline is empty


		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

#create pig script

input= ":INPATH:/singlefile/studenttab10k"
output= ":OUTPATH:"
maximum=9999 


P = Pig.compile("""
A = load '$in' as (name, age, gpa);
B= filter A by age > $max;
store B into '$out';
""")

Q = P.bind([
        {'in':input ,'max':maximum ,'out':output} 
          ])

results = Q.run()

if results.get(0).isSuccessful():
    print "Pig job PASSED"
else:
    raise "Pig job FAILED"    
\

                       ,'rc' => 0
#FIX: could add a more elabore check
		}
	]

 	}, {
	'name' => 'Jython_Diagnostics'
       ,'tests' => [
                {

# 11.1  iter.next  	  
# 11.2 1 	iter = results.getResults(alias) with first alias
		'num' => 1
		,'ignore' => "This test is not ready"
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script
tmp_dir_0 = ":LOCALTESTPATH:/hadoopqa.:RUNID:"
if not os.path.isdir(tmp_dir_0):
	os.mkdir(tmp_dir_0)
tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_Diagnostics_1"
if not os.path.isdir(tmp_dir):
	os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < 50;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).runSingle()

if result.isSuccessful():
	print "Pig job PASSED"
else:
	raise "Pig job FAILED"    

for maximum in range(4, 13):
	output=":OUTPATH:"+str(maximum)
	Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
	result = Q.runSingle()
	Pig.explain();
	Pig.illustrate();


	Pig.describe('A');
	Pig.describe('B');
	Pig.describe('C');
	Pig.describe('D');
	Pig.illustrate('B');
	Pig.illustrate('D');
	Pig.explain('A');

    
	if not result.isSuccessful():
		raise "Pig job FAILED"    
	iter = result.result("A")
	if iter.hasNext():
#DO SOMETHING
#input = output
		output = "output-" + str(i)
	else:
		Pig.fs("cp " + output + " " + final)
		break

\
# explain A   
                       ,'rc' => 0
                       ,'expected_out_regex' => "A: {name: bytearray,age: bytearray,gpa: bytearray}"
# explain B   
                       ,'expected_out_regex' => "B: {name: bytearray,age: bytearray,gpa: bytearray}"
# explain C   
                       ,'expected_out_regex' => "C: {name: chararray,age: int,registration: bytearray,contributions: double}"
# explain D   
                       ,'expected_out_regex' => "D: {name: chararray,age: int,registration: bytearray,contributions: double}"
# illustrate B
#                       ,'expected_out_regex' => "A.*name:bytearray.*age:bytearray.*gpa:bytearray"
# illustrate D
#                       ,'expected_out_regex' => "C.*name:chararray.*age:int.*registration:bytearray.*contributions:double"
#                       ,'expected_out_regex' => "D.*name:chararray.*age:int.*registration:bytearray.*contributions:double"
#

	}, {
#11.21 	1 	getSummaryStatus() 	 
#11.22 	1 	illustrate() on a complex query 	 
#  11.23 	1 	explain() on a complex query 	 
#  11.24 	1 	describe() on an alias 	 
#  11.25 	1 	getStatus for an alias 	 
#  11.26 	1 	getStatistics for an alias 	 
#  11.27 	1 	illustrate(alias) 	 
#  11.28 	1 	describe(alias) 
		'num' => 2
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).runSingle()
\
               ,'sql' => "
select name,age from studenttab10k where age < 20; select name, age from votertab10k where age < 20;"

	}, {
#11.21 	1 	getSummaryStatus() 	 
#11.22 	1 	illustrate() on a complex query 	 
#  11.23 	1 	explain() on a complex query 	 
#  11.24 	1 	describe() on an alias 	 
#  11.25 	1 	getStatus for an alias 	 
#  11.26 	1 	getStatistics for an alias 	 
#  11.27 	1 	illustrate(alias) 	 
#  11.28 	1 	describe(alias) 
		'num' => 3
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20"; #string


#Schema specified
P = Pig.compile("""
A = load '$in1' as (name:chararray, age:int, gpa:float);
B = filter A by age < $max;
C = foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E = filter D by age < $max;
F = foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).runSingle()
\
               ,'sql' => "
select name,age from studenttab10k where age < 20; select name, age from votertab10k where age < 20;"

	}, {

#11.21 	1 	getSummaryStatus() 	 
#11.22 	1 	illustrate() on a complex query 	 
#  11.23 	1 	explain() on a complex query 	 
#  11.24 	1 	describe() on an alias 	 
#  11.25 	1 	getStatus for an alias 	 
#  11.26 	1 	getStatistics for an alias 	 
#  11.27 	1 	illustrate(alias) 	 
#  11.28 	1 	describe(alias) 
		'num' => 4
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum=20; #integer


#Schema specified
P = Pig.compile("""
A = load '$in1' as (name:chararray, age:int, gpa:float);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).runSingle()
\
               ,'sql' => "
select name,age from studenttab10k where age < 20; select name, age from votertab10k where age < 20;"

	}, {
#11.21 	1 	getSummaryStatus() 	 
#11.22 	1 	illustrate() on a complex query 	 
#  11.23 	1 	explain() on a complex query 	 
#  11.24 	1 	describe() on an alias 	 

#  11.27 	1 	illustrate(alias) 	 
#  11.28 	1 	describe(alias) 
		'num' => 5
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
count=1
output1 = ":OUTPATH:."+ str(count)
count=2
output2 = ":OUTPATH:."+ str(count)
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).runSingle()
\
               ,'sql' => "
select name,age from studenttab10k where age < 20; select name, age from votertab10k where age < 20;"
	}, {
#  11.23 	1 	explain() on a complex query 	 
		'num' => 6
		,'ignore' => 'Expected output does not appear to be correct'
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).explain()
\

                       ,'rc'=> 0
                       ,'expected_out_regex' => "Schema:.*{name:.*bytearray,age:.*bytearray}.*Type:.*Unknown"

	}, {
#11.22 	1 	illustrate() on a complex query 	 
		'num' => 7
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).illustrate();
\
                       ,'rc'=> 0
                       ,'expected_out_regex' => "A.*name:bytearray.*age:bytearray.*gpa:bytearray"
	}, {
#  11.24 	1 	describe() on an alias 	 
		'num' => 8
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).describe('A');
\
                       ,'rc'=> 0
                       ,'expected_out_regex' => "A:.*{name:.*bytearray,age:.*bytearray,gpa:.*bytearray}"
	}, {
#11.29 	1 	describe() on an undefined alias 
		'num' => 9
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).describe('INVALID_ALIAS');
\
                       ,'rc'=> 6
                       ,'expected_err_regex' => "ERROR 1005: No plan for INVALID_ALIAS to describe"


	}, {
#  11.27 	1 	illustrate(alias) 	 
		'num' => 10
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).illustrate('D');
\
                       ,'rc'=> 6
                       ,'expected_err_regex' => "ERROR 1121"
#                       ,'expected_err_regex' => "TypeError: illustrate(): expected 0 args; got 1"

	}, {
#  11.28 	1 	explain(alias) 
		'num' => 11
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).explain('C')
\
                       ,'rc'=> 6
                       ,'expected_err_regex' => "ERROR 1121"
#                       ,'expected_err_regex' => "TypeError: explain(): expected 0 args; got 1"

	}, {
#12.16 	1 	python for loop invoking pig script 
		'num' => 12
		,'ignore' => 'Trys to write everything to the same file, I think this is a test tool error not a Pig error.'
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
#maximum="20";


P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")


count=0
for maximum in range(47,50):

     count= count + 1
     output1 = ":OUTPATH:."+ str( count )
     count= count + 1
     output2 = ":OUTPATH:."+ str(count)
     result = P.bind({'in1':input1, 'in2':input2, 'max':str(maximum), 'out1':output1, 'out2':output2 }).runSingle()
     if result.isSuccessful():
       print "Pig job PASSED"
     else:
       raise "Pig job FAILED"    
    
     result = P.bind({'in1':input1, 'in2':input2, 'max':str(maximum), 'out1':output1, 'out2':output2 }).explain();
     result = P.bind({'in1':input1, 'in2':input2, 'max':str(maximum), 'out1':output1, 'out2':output2 }).illustrate();
     result = P.bind({'in1':input1, 'in2':input2, 'max':str(maximum), 'out1':output1, 'out2':output2 }).describe('E');
\     

#               ,'rc'  =>0 
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
                ,'sql' => "
select name,age from studenttab10k where age < 47; select name, age from votertab10k where age < 47; 
select name,age from studenttab10k where age < 48; select name, age from votertab10k where age < 48; 
select name,age from studenttab10k where age < 49; select name, age from votertab10k where age < 49;"


	}, {
# 11.30 1 	getStatus for an undefined alias 	
# FIX = this doesn't do "getStatus"
		'num' => 13
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';

D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")
result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).runSingle()
\
                       ,'rc'=> 0
                       #,'expected_err_regex' => "FIX ERROR MESSAGE, I BELIEVE THIS IS NOT SUPPORTED"

	}, {
# 11.1  iter.next  	  
# 11.2 1 	iter = results.getResults(alias) with first alias
		'num' => 14
                        ,'ignore' => "Test not finished, re-write it"
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_Diagnostics_14"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < $invalid_parameter;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter C by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

for maximum in range(1, 10):
    Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    Pig.explain();
    Pig.illustrate();


    Pig.describe('A');
    Pig.describe('B');
    
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = results.getResults("A")
    if iter.next() > 1:
        #DO SOMETHING
        #input = output
        #output = "output-" + str(i)
    else:
        Pig.fs("cp " + output + " " + final)
        break

\

                       ,'rc' => 6
                 ,'expected_err_regex' => "ERROR 1121"

		}
	]
	}, {
	'name' => 'Iterator'
       ,'tests' => [
                {
# 11.1  iter.next  	  
# 11.2 1 	iter = results.getResults(alias) with first alias
		'num' => 1
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_CompileBindRun_27"
if not os.path.isdir(tmp_dir):
os.mkdir(tmp_dir)
pig_script = tmp_dir + "/script.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out1';
C = load ':INPATH:/singlefile/votertab10k' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
D = filter A by name matches '^fred*';
store D into '$out2';
""")
pigfile.close()

#execute pig script
input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1= ":OUTPATH:.1"
output2= ":OUTPATH:.2"
final = ":OUTPATH:.3"


result = Pig.compileFromFile(pig_script).bind({'in1':input1,'in2':input2, 'out1':output1, 'out2':output2 }).run()

if results.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    

for i in range(1, 100):
    p.bind({'in':input, 'out':output}) # attaches $in, $out in Pig Latin to input, output Python variables
    result = Q.runSingle()
    
    if not results.isSuccessful():
        raise "Pig job FAILED"    
    iter = results.getResults("A")
    if iter.next() > 1:
        #DO SOMETHING
        #input = output
        #output = "output-" + i.to_s
    else:
        Pig.fs("cp " + output + " " + final)
        break

\

                       ,'expected_err_regex' => "Pig job FAILED"
                 ,'expected_err_regex' => "ERROR 1121"
                       ,'rc'=> 6
		}
	]

	}, {
# 12.2 import python modules 	 
# 12.1 python comments 	 
# 12.6 fs lists a file 	 


	'name' => 'Jython_Misc'
       ,'tests' => [
                {
			'num' => 101
			,'pig' => q\fs -ls :INPATH:/singlefile/studenttab10k;\
                      	,'expected_out_regex' => "studenttab10k"

                },{
# 12.5 fs is creates a directory 	 
		'num' => 1
		,'ignore' => "BUG(4284069)"
		,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
from org.apache.pig.scripting import Pig

Pig.fs( "ls :INPATH:/singlefile/studenttab10k;");
\

                       ,'expected_out_regex' => "studenttab10k"

                },{
# 12.5 fs is creates a directory 	 
		'num' => 2
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig


Pig.fs("mkdir :OUTPATH:/new_dir")
Pig.fs("ls :OUTPATH:")
\

                       ,'expected_out_regex' => "drwx.*new_dir"

                },{
# 12.7 fs is sets file permissions 	 
		'num' => 3
		,'ignore' => "BUG(4284069)"
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig


Pig.fs("mkdir :OUTPATH:/new_dir;")
Pig.fs("touchz  :OUTPATH:/new_dir/file_600.txt")
Pig.fs("touchz  :OUTPATH:/new_dir/file_664.txt")
Pig.fs("chmod 775 :OUTPATH:/new_dir/file_664.txt")
Pig.fs("ls :OUTPATH:/new_dir;")
\

#                       ,'expected_out_regex' => "-rw-------.*file_600.txt"
                        ,'expected_out_regex' => "-rw-rw-r--.*file_664.txt"

                },{

# 12.5 2 	fs is creates a directory 	 
# 12.6 2 	fs is creates a file 	 
# 12.7 2 	fs is sets file permissions 	 
# 12.8 2 	positional parameters 
# 14.0.4 (compile()bind().runSingle)+ 
		'num' => 4
		,'ignore' => "BUG(4284069)"
		,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
from org.apache.pig.scripting import Pig


Pig.fs("mkdir :OUTPATH:/new_dir;")
Pig.fs("touchz  :OUTPATH:/new_dir/file_600.txt")
Pig.fs("touchz  :OUTPATH:/new_dir/file_664.txt")
Pig.fs("chmod 775 :OUTPATH:/new_dir/file_664.txt")
Pig.fs("ls :OUTPATH:/new_dir;")
\

#                       ,'expected_out_regex' => "-rw-------.*file_600.txt"
                        ,'expected_out_regex' => "-rw-rw-r--.*file_664.txt"

                },{
# 12.12 positional parameter
# 12.8 register(String jarfile) where fs register a valid jar 	 
# Tis is the same as nightly.conf - LoaderTextLoader_1, results are doctored 
		'num' => 5
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ':INPATH:/singlefile/textdoc';
output= ':OUTPATH:';
testjar=':FUNCPATH:/testudf.jar';

result = Pig.compile("""
register $jar;
A = load '$in' using TextLoader();
B = foreach A generate TOKENIZE((chararray)$0);
store B into '$out' using org.apache.pig.test.udf.storefunc.StringStore();
""").bind({'in':input,'jar':testjar,'out':output }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'sql' => "select name from textdoc;"
					   ,'verify_with_pig' => 1
					   ,'verify_pig_script' => q\register ':FUNCPATH:/testudf.jar';
A = load ':INPATH:/singlefile/textdoc' using TextLoader();
B = foreach A generate TOKENIZE((chararray)$0);
store B into ':OUTPATH:' using org.apache.pig.test.udf.storefunc.StringStore();\,


                },{
# 12.2 import python modules 
# 12.9 define(String alias, String definition) with simple definition 	 
# 12.14 pig script with streaming 
# FILE BUG, this never returns
		'num' => 6 
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ':INPATH:/singlefile/studenttab10k';
output1= ':OUTPATH:.1';
output2= ':OUTPATH:.2';
testjar=':FUNCPATH:/testudf.jar';

result = Pig.compile("""
define CMD1 `perl -ne 'print $_;'`;
define CMD2 `perl -ne 'print $_;'`;
A = load '$in' as (name, age, gpa);
B = stream A through CMD1 as (name, age, gpa);
store B into '$out1';
C = stream B through CMD2 as (name, age, gpa);
D = JOIN B by name, C by name;
store D into '$out2';
""").bind({'in':input,'jar':testjar,'out1':output1, 'out2':output2 }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

            ,'sql' => "select name, age, gpa from studenttab10k;
                      select A.name, A.age, A.gpa, B.name, B.age, B.gpa
                      from studenttab10k as A join studenttab10k as B using(name);"
                         ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
 
	}, {
#
		'num' => 7
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= "DOES_NOT_EXIST"
input2= ":INPATH:/singlefile/votertab10k"
maximum="50";
output = ":OUTPATH:"


P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
store A into '$out';
""")

result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out':output}).runSingle() 
\

                       ,'expected_err_regex' => "ERROR 2118: Input path does not exist"

            },{
# 12.10 define(String alias, String definition) with definitions containing variables 	 
# 12.11 define(String alias, String definition) with definitions containing double quotest and single quotest ... 	1 	 
# 12.13 public static void set(String var, String value) {...} 
            'num' => 8,
            'pig' => q# define CMD1 `perl -ne 'print $_;'`;
                        define CMD2 `perl -ne 'print $_;'`;
                        A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa);
                        B = stream A through CMD1 as (name, age, gpa);
                        store B into ':OUTPATH:.1';
                        C = stream B through CMD2 as (name, age, gpa);
                        D = JOIN B by name, C by name;
                        store D into ':OUTPATH:.2'; #,
            'sql' => "select name, age, gpa from studenttab10k;
                      select A.name, A.age, A.gpa, B.name, B.age, B.gpa + 0.00
                      from studenttab10k as A join studenttab10k as B using(name);",
                          ,'floatpostprocess' => 1
                        ,'delimiter' => '	'
          },{ # DONOT CHANGE INDENTATION

#12.15  python block indentation 
		'num' => 9  
		,'ignore' => "BUG(4284069)"
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
store B into '$out';
""")


count=0
for maximum in range(47,50):

     count= count + 1
     output = ":OUTPATH:."+ str(count)
     maximum= maximum
     result = P.bind({'in1':input, 'in2':input, 'max':maximum, 'out':output }).runSingle()
  if result.isSuccessful():
        print "Pig job PASSED"
  else:
        raise "Pig job FAILED"    
    
\
                       ,'expected_out_regex' => "ERROR 1121"
                       ,'expected_out_regex' => "unindent does not match any outer indentation level"

	}, {
# 12.17 1 	invoke a nonexistent method on a pig object 
		'num' => 10
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")
#SHOULD NOT REFEERENCE PIG, THIS SHOULD RESULT IS AN ERROR
result = Pig.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).runSingle()
\

#FIX: Confirm rc 8 is ok
                       ,'rc' => 6
                       ,'expected_err_regex' => "self arg can.*t be coerced to org.apache.pig.scripting.Pig"
                       ,'expected_err_regex' => "ERROR 1121"
	}, {
# 12.18 1 	invoke .run() on a non-parallel pig script
		'num' => 11
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output1 = ":OUTPATH:.1"
output2 = ":OUTPATH:.2"
maximum="20";


#No Schema specified
P = Pig.compile("""
A = load '$in1' as (name, age, gpa);
B= filter A by age < $max;
C= foreach B generate name,age;
store C into '$out1';
D = load '$in2' using PigStorage() as (name:chararray, age:int, registration, contributions:double);
E= filter D by age < $max;
F= foreach E generate name,age;
store F into '$out2';
""")
result = P.bind({'in1':input1, 'in2':input2, 'max':maximum, 'out1':output1, 'out2':output2 }).run()
\
                       ,'sql' => 
"select name,age from studenttab10k where age < 20; select name, age from votertab10k where age < 20;"
 	}, {
 
# 12.8 positional parameters 

		'num' => 12
		,'pig' => q\#!/usr/bin/python

from org.apache.pig.scripting import Pig
input= ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:"

result = Pig.compile("""
register :FUNCPATH:/testudf.jar;
a = load '$in';
b = group a by $0;
c = foreach b {c1 = order $1 by * using org.apache.pig.test.udf.orderby.OrdDesc; generate flatten(c1); };
store c into '$out';
""").bind({'in':input, 'out':output}).runSingle()

if not result.isSuccessful():
    raise "Pig job failed"
\

                   ,'sql' => "select name, age, gpa from studenttab10k order by name, age desc, gpa desc;" 
                         ,'floatpostprocess' => 1
                        ,'delimiter' => '	'

                },{
# 12.22 register invalid jar
# Tis is the same as nightly.conf - LoaderTextLoader_1, results are doctored 

		'num' => 13
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ':INPATH:/singlefile/textdoc';
output= ':OUTPATH:';
testjar=':FUNCPATH:/INVALID.jar';

result = Pig.compile("""
register $jar;
A = load '$in' using TextLoader();
B = foreach A generate TOKENIZE((chararray)$0);
store B into '$out' using org.apache.pig.test.udf.storefunc.StringStore();
""").bind({'in':input,'jar':testjar,'out':output }).runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'rc' => 6
               ,'expected_err_regex' => " ERROR 101:.*jar.*does not exist" 

                },{
		'num' => 14
		,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
from org.apache.pig.scripting import Pig

result = Pig.fs( "ls :INPATH:/singlefile/INVALID;");
if !result.isSuccessful():
    raise "Pig job FAILED"
\

                       ,'rc' => 6
#               ,'expected_out_regex' => "FIX ERROR MESSAGE"

                },{
# 12.22 Invoking result for Pig.fs is not supported, should throw a warning at a minimum
		'num' => 15
		,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
from org.apache.pig.scripting import Pig


P = Pig.fs("ls :INPATH:/singlefile/student*;")

result = Q.runSingle()

if result.isSuccessful():
    print "Pig job PASSED"

else:
    raise "Pig job FAILED"    
\

                       ,'rc' => 6
               ,'expected_err_regex' => "ERROR 1121" 

                 }
                 ]
 
 	}, {


# 17.0.1 convergence : compile some pig script, in python run that script n times. if it was successful take this (action 1) otherwise take this (action 2) 	  	 
# 17.0.2 conditional compilation : if condition is satisfied use this (pig code 1) otherwise use this (pig code 2 ) in the pig script to compile 	  	 
# 17.0.3 parallel execution : execute several data pipelines for the this pig script 	  	 
# 17.0.4 automated pig latin generation : if condition then use this loader otherwise use this loader 	  	 
# 17.0.5 conditional execution/cross cluster communication: iterate across clusters, if the file exists then copy it to local file system
# 17.0.6 conditional execution: if directory exists then remove directory before running pig script 
 
 	'name' => 'Jython_Usecase'
        ,'tests' => [
                 {
 
## Wrie a pig script that sorts by multiple keys
 		'num' => 1
 		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

P = Pig.compile("""A  = load '$in' as (name, age, gpa);
B = group A by $group_key;
C = foreach B generate group, COUNT(A.$group_key);
store C into '$out';
""")

##main.pig

GroupByName = P.bind({'in':input, 'out':":OUTPATH:.1", 'group_key':"name"}).runSingle()
GroupByAge  = P.bind({'in':input, 'out':":OUTPATH:.2", 'group_key':"age"}).runSingle()
GroupByGpa  = P.bind({'in':input, 'out':":OUTPATH:.3", 'group_key':"gpa"}).runSingle()

if (GroupByName.isSuccessful() and GroupByAge.isSuccessful() and GroupByGpa.isSuccessful()):
    print "Pig job SUCCESSFUL"
else:
    raise "Pig job FAILED"
\ 
	,'floatpostprocess' => 1
	,'delimiter' => '	'
	,'sql' =>
 "select name, count(name) from studenttab10k group by name;
  select age, count(age) from studenttab10k group by age;
  select gpa, count(gpa) from studenttab10k group by gpa;"
 
 	}, {
#
# 17.0.1 convergence : compile some pig script, in python run that script n times. if it was successful take this (action 1) otherwise take this (action 2) 	 
# 12.8 positional parameters 
# 11.1  iter.next  	  
# 11.3 1 	iter = results.getResults(alias) with middle alias


	'num' => 2
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

P= Pig.compile("""
    A  = load '$in' as (name, age, gpa);
    B = filter A by gpa < $gpa_key;
    store B into '$out';
    """)

    #
    #main.pig

input  = ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:.1"
final  = ":OUTPATH:_final"

gpa_keys =[ "4.0","3.0","2.0" ]
for i in range( len( gpa_keys ) ):
    results = P.bind({'in':input, 'out':output, 'gpa_key':gpa_keys[i]}).runSingle()
    if not results.isSuccessful():
        raise "Pig job failed"
    result = results.result("B")
    if result.iterator().hasNext():
        input = ":OUTPATH:." + str(i+1)
        output = ":OUTPATH:." + str(i+2)
    else:
        Pig.fs("-cp " + output + " " + final)
        break

\
	,'floatpostprocess' => 1
	,'delimiter' => '	'
	,'sql' =>
 "select name, age, gpa from studenttab10k where gpa < 4.0;
  select name, age, gpa from studenttab10k where gpa < 3.0;
  select name, age, gpa from studenttab10k where gpa < 2.0;"
 
 	}, {

# 17.0.2 conditional compilation : if condition is satisfied use this (pig code 1) otherwise use this (pig code 2 ) in the pig script to compile 
# A sub-use case of automated generation is conditional code generation.
# Different processing might be required based on whether this is weekday or a weekend:

		'num' => 3
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"

script = ""

for i in [1, 2, 3]:
	if i > 2.0:
		script = "B = order A by gpa, age, name; "
	else:
		script = "B = order A by name, age, gpa; "
	script = "A  = load '$in' as (name, age, gpa);" + script + "store B into '$out';"
	output = ":OUTPATH:." + str(i)
	result = Pig.compile(script).bind({'in':input, 'out':output}).runSingle()

\


	,'floatpostprocess' => 1
	,'delimiter' => '	'
             ,'sql' =>
 "SELECT name,age,gpa FROM studenttab10k ORDER BY gpa, age, name;
  SELECT name,age,gpa FROM studenttab10k ORDER BY gpa, age, name;
  SELECT name,age,gpa FROM studenttab10k ORDER BY name, age, gpa;"
	}, {

#17.0.2 conditional compilation : if condition is satisfied use this (pig code 1) otherwise use this (pig code 2 ) in the pig script to compile 

		'num' => 4
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output = ":OUTPATH:"
intermed = ":OUTPATH:.intermediate"

script = """a = load '$in1' using $loader1() as (name, age, gpa);
            store a into '$intermediate' using $loader2();
            b = load '$intermediate' using $loader2() as (name, age, gpa);
            c = load '$in2' as (name, age, registration, contributions);
            e = cogroup b by (name, age) inner, c by (name, age) inner;
            f = foreach e generate flatten (b), flatten(c);
            store f into '$out';
        """

for i in [1, 2]:
    output = ":OUTPATH:." + str(i)
    #Use Pig Storage only
    if i  == 1:
        results = Pig.compile(script).bind({'in1':input1, 'in2':input2, 'intermediate':intermed, 'loader1':"PigStorage", 'loader2':"PigStorage", 'out':output}).runSingle()
        Pig.fs("-rmr " + intermed)
        #Use Pig and Bin Storage
    else:
        results = Pig.compile(script).bind({'in1':input1, 'in2':input2, 'intermediate':intermed, 'loader1':"PigStorage", 'loader2':"BinStorage", 'out':output}).runSingle()

\

	,'floatpostprocess' => 1
	,'delimiter' => '	'
                , 'sql' => 
"select a.name, a.age, a.gpa, b.name, b.age, b.registration, b.contributions from studenttab10k as a join votertab10k as b using(name, age);
select a.name, a.age, a.gpa, b.name, b.age, b.registration, b.contributions from studenttab10k as a join votertab10k as b using(name, age);"

	}, {

# 17.0.6  conditional execution: if directory exists then remove directory before running pig script 

		'num' => 5
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input= ":INPATH:/singlefile/studenttab10k"
directory=":OUTPATH:/tmp_dir"

Pig.fs("-mkdir " + directory)
#Pig.fs("ls $dir").bind('dir':directory).runSingle();

Pig.fs("-rmr " + directory )
\
               ,'rc' =>0 
 
 
	}, {
## Pig script has an error, COUNT(A) shoudl be COUNT(B)
 
 		'num' => 6
 		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
 
input= ":INPATH:/singlefile/studenttab10k"

P = Pig.compile("""A  = load '$in' as (name, age, gpa);
B = group A by $group_key;
C = foreach B generate group, COUNT(B);
store C into '$out';
""")
 
##main.pig
 
GroupByName = P.bind({'in':input, 'out':":OUTPATH:.1", 'group_key':"name"}).runSingle()
GroupByAge  = P.bind({'in':input, 'out':":OUTPATH:.2", 'group_key':"age"}).runSingle()
GroupByGpa  = P.bind({'in':input, 'out':":OUTPATH:.3", 'group_key':"gpa"}).runSingle() 

if (GroupByName.isSuccessful() and GroupByAge.isSuccessful() and GroupByGpa.isSuccessful()):
	print "Pig job SUCCESSFUL" 
else:
	raise "Pig job FAILED"
 \
 
             ,'rc' => 6
             ,'expected_err_regex' => "Invalid scalar projection: B"


 	}, {
#
# 17.0.1 convergence : compile some pig script, in python run that script n times. if it was successful take this (action 1) otherwise take this (action 2) 	 
# 12.8 positional parameters 
# 11.5 attempt to iter.next beyond upper bound 

	'num' => 7
		,'pig' => q\#!/usr/bin/python

from org.apache.pig.scripting import Pig

P= Pig.compile("""
    A  = load '$in' as (name, age, gpa);
    B = filter A by gpa < $gpa_key;
    store C into '$out';
""")
#
#main.pig

input= ":INPATH:/singlefile/studenttab10k"
output = ":OUTPATH:.1"
final  = ":OUTPATH:_final"

gpa_keys =[ "4.0","3.0","2.0" ]
for i in range( len( gpa_keys ) ):
    
    results = P.bind({'in':input, 'out':output, 'gpa':gpa_keys[i]}).runSingle()
    if not results.isSuccessful():
        raise "Pig job failed"
    iter = results.getResults("C")
    if iter.next() > 1:
        j= i + 1
        input = ":OUTPATH:." + i.to_s
        output = ":OUTPATH:." + j.to_s
    else:
        Pig.fs("cp " + output + " " + final)
        break
\
             ,'rc' => 6
             ,'expected_err_regex' => "Undefined parameter : gpa_key"
               ,'expected_err_regex' => "ERROR 1121" 

	}, {

#17.0.2 conditional compilation : if condition is satisfied use this (pig code 1) otherwise use this (pig code 2 ) in the pig script to compile 

		'num' => 9
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig

input1= ":INPATH:/singlefile/studenttab10k"
input2= ":INPATH:/singlefile/votertab10k"
output = ":OUTPATH:"
intermed = ":OUTPATH:/.intermediate"

script = """a = load '$in1' using $loader1() as (name, age, gpa);
            store a into '$intermediate' using $loader2();
            b = load '$intermediate' using $loader2() as (name, age, gpa);
            c = load '$in2' as (name, age, registration, contributions);
            e = cogroup b by (name, age) inner, c by (name, age) inner;
            f = foreach e generate flatten (b), flatten(c);
            store f into '$out';
        """

for i in [1, 2]:
    output = ":OUTPATH:/." + str(i)
    #Use Pig Storage only
    results = Pig.compile(script).bind({'in1':input1, 'in2':input2, 'intermediate':intermed, 'loader1':"PigStorage", 'loader2':"PigStorage" ).runSingle()
    Pig.fs("-rmr " + intermed)
#MISSING out:output

\
	,'rc' => 6
         ,'expected_err_regex' => "no viable alternative at input"
        ,'expected_err_regex' => "ERROR 1121"

	}, {

# 17.0.6  conditional execution: if directory exists then remove directory before running pig script 

		'num' => 10
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
input= ":INPATH:/singlefile/studenttab10k"
directory=":OUTPATH:/tmp_dir"

Pig.fs("mkdir " + directory)
#Pig.fs("ls $dir").bind('dir':directory).runSingle();

Pig.fs("rm " + directory )
\
               ,'rc' =>0 
 
	}
                ]

	}, {

	'name' => 'Jython_Macro'
       ,'tests' => [
                {
# Lets take a look at a common task that load a file and then groups, counts, and stores on multiple separate keys:


#FIX: Also write this as a Macro
		'num' => 1
		,'ignore' => 'Milestone III'
		,'pig' => q\#!/usr/bin/python
from org.apache.pig.scripting import Pig
import os;

#create pig script

# mymodule.pig
tmp_dir = ":LOCALTESTPATH:/hadoopqa.:RUNID:/Jython_Macro_1"
if not os.path.isdir(tmp_dir):
        os.mkdir(tmp_dir)
pig_script = tmp_dir + "/module.pig"
pigfile = open( pig_script, 'w+')
pigfile.write("""
define group_and_count (A, group_key) returns B {
    D = group $A by $group_key;
    $B = foreach D generate group, COUNT($A);
};
""")
pigfile.close()


#main.pig

import module.pig;
alpha = load 'users' as (user, age, zip);
gamma = group_count (alpha, user);
beta = group_count (alpha, age);
store gamma into 'byuser';
store delta into 'byage';
\
	}
	]

	}, {
# SET debug 'on'
# SET job.name 'my job'
# SET default_parallel 100
 
                'name' => 'Jython_Properties',
                'tests' => [
                        {
                        'num' => 1 
		,'pig' => q\#!/usr/bin/python
# JYTHON COMMENT
from org.apache.pig.scripting import Pig
from java.util import Properties;

P = Pig.compile("""A = load ':INPATH:/singlefile/studenttab10k' as (name, age, gpa); 
store A into ':OUTPATH:';""")

Q = P.bind()

prop = Properties()
prop.put("mapred.job.name", "friendship")
result = Q.runSingle(prop)

if result.isSuccessful():
	print "Pig job PASSED"
else:
	raise "Pig job FAILED"    
\

                        ,'sql' => "select name, age, gpa+0.00 from studenttab10k;" 
                        ,'floatpostprocess' => 1
                        ,'delimiter' => '	'

	}
	]
            } 
        ]
    }
;




